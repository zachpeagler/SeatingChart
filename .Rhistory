shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('C:/Github/Portfolio/Apps/01_meteorites/app')
install.packages("leaflet")
shiny::runApp()
runApp()
install.packages("proxy")
dist(as.data.frame(x=1, y=1), as.data.frame(x=3,y=1), method="euclidean")
dist(as.data.frame(x=1, y=1), as.data.frame(x=3,y=1), method="euclidean")
dist(c(1,1),c(3,3,), method="euclidean")
dist(c(1,1),c(3,3), method="euclidean")
# quick euclidian distance function
euc_d <- function(x,y) {
sqrt(sum(x-y)^2)
}
# test data
tdata <- read.csv("C:/Github/Portfolio/Apps/seating_chart/sc_testdata.csv")
seating <- reactiveValues(data = NULL, chart = NULL, colors = NULL, nrow = NULL, ncol = NULL)
students <- tdata
num_rows <- 5
num_cols <- 5
grid <- matrix(NA, nrow = num_rows, ncol = num_cols)  # Initialize an empty grid
colors <- rainbow(length(unique(students$group)))  # Generate colors for each group
# --- Part 1: Assign Front Row Students ---
front_row_students <- students %>% filter(frontRow == TRUE)
# Assign front row seats (1st row and possibly 2nd row)
for (i in seq_len(nrow(front_row_students))) {
if (i <= num_cols) {
grid[1, i] <- front_row_students$name[i]
} else {
grid[2, i - num_cols] <- front_row_students$name[i - num_cols]
}
}
# --- Part 1: Assign Front Row Students ---
front_row_students <- students %>% filter(frontRow == TRUE)
library("tidyverse")
# dependencies
library("shiny")
# --- Part 1: Assign Front Row Students ---
front_row_students <- students %>% filter(frontRow == TRUE)
# Assign front row seats (1st row and possibly 2nd row)
for (i in seq_len(nrow(front_row_students))) {
if (i <= num_cols) {
grid[1, i] <- front_row_students$name[i]
} else {
grid[2, i - num_cols] <- front_row_students$name[i - num_cols]
}
}
# Debugging: Check grid after assigning front-row students
print("Grid after assigning front-row students:")
print(grid)
View(grid)
euc_d(grid[1,1], grid[3,3])
runApp()
runApp()
runApp()
rm(list = ls())
source("./utils_V10.R")
source("./config_V10.R")
setwd(.)
setwd("C:/Data/Upwork/KevinB/KevinB/REVISED 2024 R SCRIPT PROJECT/R FORECAST SCRIPTS")
source("./utils_V10.R")
source("./config_V10.R")
# Load data and correct date
output1 <- list()
output2 <- list()
# read data and set to data.table
key_matrix <- read.csv(matrix_path)
df <- read.csv(data_path)
setDT(key_matrix)
setDT(df)
# calculate time columns and merge
df <- calculate_time_columns(key_matrix, df, LQM_val, custom_forecast)
data_matrix <- copy(df)
if(custom_forecast){
data_matrix[,CUSTOM:=NULL]
}
# run forecasts
## quarterly
df_Q <- create.statistical.forecasts.qtr(df, Yrs_to_forecast, value)
## annually
df_A <- create.statistical.forecasts.ann(df, Yrs_to_forecast, value)
# check for custom column
if(("CUSTOM" %in% colnames(df)) & custom_forecast){
forecast_types <- c(forecast_types, "CUSTOM")
}
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
## annually
orchestrate.table.creation(df_A, data_matrix, 'A')
source("./utils_V10.R")
source("./config_V10.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
# analysis and order to include in output determined here
# OPTIONS "CM", "WD", "DM", "MD", "WY", "SPEED_15", "SPEED_30", "M15_PK",
# "M30_PK","MOON_SIGN", "MOON_SS", "VENUS_SS", "VENUS_SRS", "MOON_SPEED",
# "VENUS_SIGN", "VENUS_SPEED", "VENUS_SPEED_R"
ids <- c("MOON_SIGN", "VENUS_SS", "VENUS_SRS")
source("./config_V10.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
rm(list = ls())
source("./utils_V10.R")
source("./config_V10.R")
# Load data and correct date
output1 <- list()
output2 <- list()
# read data and set to data.table
key_matrix <- read.csv(matrix_path)
df <- read.csv(data_path)
setDT(key_matrix)
setDT(df)
# calculate time columns and merge
df <- calculate_time_columns(key_matrix, df, LQM_val, custom_forecast)
data_matrix <- copy(df)
if(custom_forecast){
data_matrix[,CUSTOM:=NULL]
}
# run forecasts
## quarterly
df_Q <- create.statistical.forecasts.qtr(df, Yrs_to_forecast, value)
## annually
df_A <- create.statistical.forecasts.ann(df, Yrs_to_forecast, value)
# check for custom column
if(("CUSTOM" %in% colnames(df)) & custom_forecast){
forecast_types <- c(forecast_types, "CUSTOM")
}
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V10.R")
source("./config_V10.R")
# Load data and correct date
output1 <- list()
output2 <- list()
# read data and set to data.table
key_matrix <- read.csv(matrix_path)
df <- read.csv(data_path)
View(df)
data_dates_yr <- df[,mdy(get(date_column))]
data_dates_yr <- df[,get(date_column)]
data_dates_yr <- df[,date_column]
data_dates_yr <- as.Date(df[,date_column])
data_dates_yr <- df[,date_column]
data_dates <- df[,date_column]
data_dates_p <- as.Date(data_dates, format="%m/%d/%y")
year <- 1985
dates_in_year <- data_dates_p %>% filter(year(date) %in% year)
data_dates_p <- as.character(as.Date(data_dates, format="%m/%d/%y"))
dates_in_year <- data_dates_p %>% filter(year(date) %in% year)
data_dates_p <- as.Date(data_dates, format="%m/%d/%y")
dates_in_year <- data_dates_p %>% select(year(date) %in% year)
data_dates_p <- as.data.frame(as.Date(data_dates, format="%m/%d/%y"))
View(data_dates_p)
dates_in_year <- data_dates_p %>% filter(year(data_dates_p[[1]]) %in% year)
View(dates_in_year)
source("./utils_V10.R")
source("./config_V10.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
tdat <- read.csv(data_path)
source("./utils_V10.R")
source("./config_V10.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
dates = seq.Date(as.Date(paste(year, 1, 1, sep = '-')), as.Date(paste(year, 12, 31, sep = '-')), "day")
### get all the dates from the temp data in our selected year
dates_in_year <- as.Date(data_dates_p %>% filter(year(data_dates_p[[1]]) %in% year))
clean_dates <- seq.Date(dates_in_year)
clean_dates <- seq.Date(dates_in_year[[1]])
View(dates_in_year)
clean_dates <- dates_in_year[[1]]
source("./utils_V10.R")
source("./config_V10.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V10.R")
source("./config_V10.R")
## annually
orchestrate.table.creation(df_A, data_matrix, 'A')
# Load data and correct date
output1 <- list()
output2 <- list()
# read data and set to data.table
key_matrix <- read.csv(matrix_path)
df <- read.csv(data_path)
setDT(key_matrix)
setDT(df)
# calculate time columns and merge
df <- calculate_time_columns(key_matrix, df, LQM_val, custom_forecast)
data_matrix <- copy(df)
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
if(custom_forecast){
data_matrix[,CUSTOM:=NULL]
}
# run forecasts
## quarterly
df_Q <- create.statistical.forecasts.qtr(df, Yrs_to_forecast, value)
## annually
df_A <- create.statistical.forecasts.ann(df, Yrs_to_forecast, value)
# check for custom column
if(("CUSTOM" %in% colnames(df)) & custom_forecast){
forecast_types <- c(forecast_types, "CUSTOM")
}
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
rm(list = ls())
source("./utils_V11.R")
source("./config_V11.R")
setwd("C:/Data/Upwork/KevinB_v2/R FORECAST SCRIPTS")
source("./utils_V11.R")
source("./config_V11.R")
# Load data and correct date
output1 <- list()
output2 <- list()
# read data and set to data.table
key_matrix <- read.csv(matrix_path)
df <- read.csv(data_path)
setDT(key_matrix)
setDT(df)
# calculate time columns and merge
df <- calculate_time_columns(key_matrix, df, LQM_val, custom_forecast)
data_matrix <- copy(df)
if(custom_forecast){
data_matrix[,CUSTOM:=NULL]
}
# run forecasts
## quarterly
df_Q <- create.statistical.forecasts.qtr(df, Yrs_to_forecast, value)
rm(list = ls())
source("./utils_V11.R")
source("./config_V11.R")
# Load data and correct date
output1 <- list()
output2 <- list()
# read data and set to data.table
key_matrix <- read.csv(matrix_path)
df <- read.csv(data_path)
setDT(key_matrix)
setDT(df)
# calculate time columns and merge
df <- calculate_time_columns(key_matrix, df, LQM_val, custom_forecast)
data_matrix <- copy(df)
if(custom_forecast){
data_matrix[,CUSTOM:=NULL]
}
# run forecasts
## quarterly
df_Q <- create.statistical.forecasts.qtr(df, Yrs_to_forecast, value)
## annually
df_A <- create.statistical.forecasts.ann(df, Yrs_to_forecast, value)
# check for custom column
if(("CUSTOM" %in% colnames(df)) & custom_forecast){
forecast_types <- c(forecast_types, "CUSTOM")
}
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
## annually
orchestrate.table.creation(df_A, data_matrix, 'A')
source("./utils_V11.R")
source("./config_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
## annually
orchestrate.table.creation(df_A, data_matrix, 'A')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
source("./config_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
source("./utils_V11.R")
# create table
## quarterly
orchestrate.table.creation(df_Q, data_matrix, 'Q')
## annually
orchestrate.table.creation(df_A, data_matrix, 'A')
